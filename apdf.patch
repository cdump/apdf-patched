--- src/com/googlecode/apdfviewer/PDFView.java	(revision 565)
+++ src/com/googlecode/apdfviewer/PDFView.java	(working copy)
@@ -115,6 +115,16 @@
     private int m_maxX = 0;
     
     private int m_maxY = 0;
+
+    private int m_minX = 0;
+
+    private int m_offsetLeft = 0;
+
+    private int m_offsetRight = 0;
+
+    private int m_offsetLeft_real = 0;
+
+    private int m_offsetRight_real = 0;
     
     private Size m_size = new Size();
     
@@ -322,12 +332,45 @@
     private void pageChanged() {
         pageChanged(0);
     }
+
+    public void setLeftOffset(int c) {
+      m_offsetLeft_real = c;
+    }
+
+    public void setRightOffset(int c) {
+      m_offsetRight_real = c;
+    }
+
+    public int getLeftOffset() {
+      return m_offsetLeft_real;
+    }
+
+    public int getRightOffset() {
+      return m_offsetRight_real;
+    }
+
+    public void updateLeftOffset(int c) {
+      m_offsetLeft_real += 5*c;
+      setZoomFactor(m_zoom_factor);
+    }
+
+    public void updateRightOffset(int c) {
+      m_offsetRight_real = m_startX + ((m_Rotate == 0) ? WIDTH : HEIGHT);
+      setZoomFactor(m_zoom_factor);
+    }
     
     private void pageChanged(int status) {
         m_doc.getPageSize(m_current_page, m_size);
         calculateRealZoomFactor();
         m_maxX = (int) (m_realzoom * m_size.width);
         m_maxY = (int) (m_realzoom * m_size.height);
+
+        m_offsetLeft = (int) (m_realzoom * m_offsetLeft_real) + 1;
+        m_offsetRight = (int) (m_realzoom * m_offsetRight_real) + 1;
+
+        m_maxX -= m_offsetRight;
+        m_minX = m_offsetLeft;
+
         m_listener.onPageChanged(this, m_current_page + 1);
         if (status >= 2) {
             m_startX = m_Rotate == 0 ? WIDTH : HEIGHT;
@@ -346,7 +389,7 @@
             }
             status -= 2;
         } else {
-            m_startX = 0;
+            m_startX = m_minX;
             m_startY = 0;
         }
         
@@ -376,7 +419,7 @@
             int orgStarty = m_startY;
             m_startX += (m_Rotate == 0) ? WIDTH : HEIGHT;
             if (m_startX >= m_maxX) {
-                m_startX = 0;
+                m_startX = m_minX;
                 m_startY += (m_Rotate == 0) ? HEIGHT : WIDTH;
                 if (m_startY >= m_maxY) {
                     if (m_current_page != m_page_count - 1) {
@@ -389,15 +432,18 @@
                     return;
                 }
             }
+            if ((m_startX + ((m_Rotate == 0) ? WIDTH : HEIGHT)) >= m_maxX) {
+              m_startX = m_maxX - ((m_Rotate == 0) ? WIDTH : HEIGHT);
+            }
             if (cached != 1) {
-                if (m_startX != 0) {
+                if (m_startX != m_minX) {
                     m_startX -= 10;
                 }
                 if (m_startY != 0) {
                     m_startY -= 10;
                 }
                 dirty();
-                if (m_startX != 0) {
+                if (m_startX != m_minX) {
                     m_startX += 10;
                 }
                 if (m_startY != 0) {
@@ -416,16 +462,19 @@
             int page = m_current_page;
             x += (m_Rotate == 0) ? WIDTH : HEIGHT;
             if (x >= m_maxX) {
-                x = 0;
+                x = m_minX;
                 y += (m_Rotate == 0) ? HEIGHT : WIDTH;
                 if (y >= m_maxY) {
                     if (page != m_page_count - 1) {
                         page++;
                     }
-                    updateCache(0, 0, page);
+                    updateCache(m_minX, 0, page);
                     return;
                 }
             }
+            if ((m_startX + ((m_Rotate == 0) ? WIDTH : HEIGHT)) >= m_maxX) {
+              m_startX = m_maxX - ((m_Rotate == 0) ? WIDTH : HEIGHT);
+            }
             x -= 10;
             y -= 10;
             updateCache(x, y, page);
@@ -453,7 +502,7 @@
             }
             m_startX -= m_Rotate == 0 ? WIDTH : HEIGHT;
             System.out.println("new StartX = " + m_startX + " maxX =" + m_maxX);
-            if (m_startX < 0) {
+            if (m_startX < m_minX) {
                 m_startX = m_maxX;
                 m_startX -= m_Rotate == 0 ? WIDTH : HEIGHT;
                 m_startY -= m_Rotate == 0 ? HEIGHT : WIDTH;
@@ -464,7 +513,7 @@
                         pageChanged(2 + cache);
                     } else {
                         m_startY = 0;
-                        m_startX = 0;
+                        m_startX = m_minX;
                         return;
                     }
                 }
@@ -494,7 +543,6 @@
      *            the zoom factor, < 0 means fit width.
      */
     public void setZoomFactor(float z) {
-        if (Float.compare(m_zoom_factor, z) != 0) {
             m_zoom_factor = z;
             // reset offset?
             if (m_cache_bitmap_prev != null) {
@@ -510,7 +558,6 @@
             m_cache_bitmap_prev = null;
             m_cache_bitmap_next = null;
             pageChanged();
-        }
     }
     
     /**
--- src/com/googlecode/apdfviewer/PDFViewerActivity.java	(revision 565)
+++ src/com/googlecode/apdfviewer/PDFViewerActivity.java	(working copy)
@@ -36,11 +36,12 @@
 import android.widget.AdapterView;
 import android.widget.ImageButton;
 import android.widget.SeekBar;
-import android.widget.Spinner;
 import android.widget.TextView;
 import android.widget.ViewAnimator;
 import android.widget.AdapterView.OnItemSelectedListener;
 import android.widget.SeekBar.OnSeekBarChangeListener;
+import android.widget.ZoomControls;
+import android.view.View.OnClickListener;
 
 import com.googlecode.apdfviewer.PDFView.StatusListener;
 import com.nookdevs.common.nookBaseActivity;
@@ -79,7 +80,7 @@
         m_pdf_view = (PDFView) findViewById(R.id.view);
         String file = uri.getPath();
         new MediaScannerNotifier(file);
-        initZoomSpinner();
+        initZoomControls();
         initButtons();
         initListener();
         m_pdf_view.openUri(uri);
@@ -97,6 +98,9 @@
                 m_landscaperight = true;
                 m_pdf_view.setRotate(270);
             }
+            m_pdf_view.setLeftOffset(pageInfo.offsetLeft);
+            m_pdf_view.setRightOffset(pageInfo.offsetRight);
+            m_pdf_view.setZoomFactor(pageInfo.zoom);
             m_pdf_view.scrollTo(pageInfo.scrollX, pageInfo.scrollY);
         } catch (Exception ex) {
             Log.e(LOGTAG, ex.getMessage(), ex);
@@ -193,10 +197,12 @@
 
     private void pageUp() {
         m_pdf_view.prevPage();
+        saveData();
     }
 
     private void pageDown() {
         m_pdf_view.nextPage();
+        saveData();
     }
 
     private void initButtons() {
@@ -211,11 +217,7 @@
         btn = (ImageButton) findViewById(R.id.prev_page);
         btn.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
-                if (m_landscapeleft) {
-                    pageDown();
-                } else {
-                    pageUp();
-                }
+                m_pdf_view.updateLeftOffset(-1); 
                 saveData();
             }
         });
@@ -231,19 +233,15 @@
         btn = (ImageButton) findViewById(R.id.next_page);
         btn.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
-                if (m_landscapeleft) {
-                    pageUp();
-                } else {
-                    pageDown();
-                }
+                m_pdf_view.updateLeftOffset(1); 
                 saveData();
             }
         });
         btn.setOnLongClickListener(new View.OnLongClickListener() {
 
             public boolean onLongClick(View v) {
-                m_seek_view.setProgress(m_pdf_view.getCurrentPage() + 1);
-                m_animator.showNext();
+                m_pdf_view.updateRightOffset(0);
+                saveData();
                 return true;
             }
         });
@@ -278,50 +276,23 @@
         });
     }
 
-    private void initZoomSpinner() {
-        Spinner s = (Spinner) findViewById(R.id.zoom);
+    private void initZoomControls() {
+      ZoomControls z = (ZoomControls) findViewById(R.id.zoom);
+       z.setOnZoomInClickListener(new OnClickListener() {
+           public void onClick(View v) {
+            float factor = m_pdf_view.getZoomFactor();
+            factor += 0.1F;
+            m_pdf_view.setZoomFactor(factor);
+           }
+       });
 
-        s.setOnItemSelectedListener(new OnItemSelectedListener() {
-            public void onNothingSelected(AdapterView<?> view) {
+       z.setOnZoomOutClickListener(new OnClickListener() {
+            public void onClick(View v) {
+              float factor = m_pdf_view.getZoomFactor();
+              factor -= 0.1F;
+              m_pdf_view.setZoomFactor(factor);
             }
-
-            public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
-                float factor = 1.0F;
-                switch (pos) {
-                    case 1:
-                        factor = 0.25F;
-                        break;
-                    case 2:
-                        factor = 0.50F;
-                        break;
-                    case 3:
-                        factor = 0.75F;
-                        break;
-                    case 4:
-                        factor = 1.00F;
-                        break;
-                    case 5:
-                        factor = 1.25F;
-                        break;
-                    case 6:
-                        factor = 1.5F;
-                        break;
-                    case 7:
-                        factor = 2.0F;
-                        break;
-                    case 8:
-                        factor = 2.5F;
-                        break;
-                    case 9:
-                        factor = 3.0F;
-                        break;
-                    default:
-                        factor = -1.0F;
-                        break;
-                }
-                m_pdf_view.setZoomFactor(factor);
-            }
-        });
+      });
     }
 
     @Override
@@ -362,6 +333,9 @@
                     pageInfo.scrollY = m_pdf_view.getScrollY();
                     pageInfo.landscapeleft = m_landscapeleft;
                     pageInfo.landscaperight = m_landscaperight;
+                    pageInfo.zoom = m_pdf_view.getZoomFactor();
+                    pageInfo.offsetLeft = m_pdf_view.getLeftOffset();
+                    pageInfo.offsetRight = m_pdf_view.getRightOffset();
                     ObjectOutputStream out =
                         new ObjectOutputStream(PDFViewerActivity.this.openFileOutput(pageInfo.file,
                             Context.MODE_PRIVATE));
@@ -460,6 +434,9 @@
     boolean landscapeleft = false;
     int scrollX = 0;
     int scrollY = 0;
+    int offsetLeft = 0;
+    int offsetRight = 0;
+    float zoom = 1.0F;
     String file;
 
 }
--- res/layout/main.xml	(revision 565)
+++ res/layout/main.xml	(working copy)
@@ -33,8 +33,8 @@
 	<LinearLayout android:layout_width="fill_parent" android:layout_height="wrap_content"
 		android:orientation="horizontal" android:gravity="center" android:layout_alignParentBottom="true"
 		>
-		<Spinner android:id="@+id/zoom" android:layout_width="wrap_content"
-			 android:entries="@+array/zoom_factor" android:layout_height="fill_parent"></Spinner>
+    <ZoomControls android:id="@+id/zoom" android:layout_width="wrap_content"
+        android:layout_height="fill_parent"></ZoomControls>
 		<ImageButton android:id="@+id/switch_page" android:src="@drawable/go" android:layout_height="fill_parent" android:layout_width="wrap_content" />
 		<ImageButton android:id="@+id/prev_page" android:layout_width="wrap_content"
 			android:layout_height="wrap_content" android:src="@drawable/prev"/>
